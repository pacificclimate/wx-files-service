openapi: '3.0.2'


info:
  title: Wx Files Service API
  description: Get metadata and data for weather files.
  version: '0.1'


servers:
  - url: http://localhost:5000
    description: Local dev server
  - url: https://services.pacificclimate.org/wx-files-service
    description: Production server


tags:
  - name: Location
    description: |
      A named location where weather file information is available.
  - name: File
    description: |
      A file containing weather information for a particular location.
  - name: SummaryFile
    description: |
      A file containing a summary of weather data and
      context and explanatory information about that data.
  - name: WxFile
    description: |
      A weather file (not a summary).


paths:
  /locations:
    get:
      summary: List all available locations.
      description: Get a list of metadata describing all available locations.
      tags:
        - Location
      operationId: wxfs.api.locations.listing
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                # Abstract this out as StationListResponse?
                type: array
                items:
                  $ref: '#/components/schemas/StationResponse'

  /locations/{id}:
    get:
      summary: Get metadata for a single location.
      description: Get metadata for a single location.
      tags:
        - Location
      operationId: wxfs.api.locations.get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Unique id of resource
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationResponse'
        404:
          $ref: '#/components/responses/404NotFound'

  /files:
    get:
      summary: List metadata for all available weather files.
      description: Get a list of metadata objects for all weather files.
      tags:
        - File
      operationId: wxfs.api.files.listing
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                # Abstract this out as FileListResponse?
                type: array
                items:
                  $ref: '#/components/schemas/FileResponse'

  /files/{id}:
    get:
      summary: Get metadata for a single weather file.
      description: Get metadata for a single weather file.
      tags:
        - File
      operationId: wxfs.api.files.get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Unique id of resource
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
        404:
          $ref: '#/components/responses/404NotFound'

  /files/{id}/content:
    get:
      summary: Get content of a single weather file.
      description: |
        Get content of a single weather file. This is to be used for
        downloading a weather file proper.
      tags:
        - File
      operationId: wxfs.api.files.getContent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Unique id of resource
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
        404:
          $ref: '#/components/responses/404NotFound'


components:
  responses:
    404NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: '404'
            message: Resource not found

  schemas:

    # Response schemas

    ErrorResponse:
      description: Generic error response body
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
      example:
        code: '404'
        message: Message giving details of problem

    StationResponse:
      description: Response to a /locations request
      allOf:
        - $ref: '#/components/schemas/Location'
        - type: object
          properties:
            files:
              type: array
              items:
                $ref: '#/components/schemas/File'

    FileResponse:
      description: Response to a /files request
      allOf:
        - $ref: '#/components/schemas/File'
        - type: object
          properties:
            location:
              $ref: '#/components/schemas/Location'

    # Component schemas. To avoid circularity, Location schemas contain no
    # references to File schemas, and vice-versa. Response schemas
    # are responsible for composing Location and File schemas as needed.

    Location:
      description: Metadata describing a location.
      type: object
      properties:
        id:
          description: Unique id of resource
          type: string
        selfUri:
          description: URI for this resource
          type: string
          format: uri
        city:
          description: Location title, city component (if parseable)
          type: string
        province:
          description: Location title, province component (if parseable)
          type: string
        country:
          description: Location title, country component (if parseable)
          type: string
        code:
          description: Location code (typically a 7-digit number)
          type: string
        latitude:
          description: Latitude of location
          type: number
        longitude:
          description: Longitude of location
          type: number
        elevation:
          description: Elevation of location
          type: number
      required:
        - id
        - selfUri
        - city
        - province
        - country
        - code
        - latitude
        - longitude
        - elevation

    File:
      description: Metadata describing a file.
      allOf:
        - $ref: '#/components/schemas/FileCommon'
        - oneOf:
            - $ref: '#/components/schemas/WxFile'
            - $ref: '#/components/schemas/SummaryFile'
          discriminator:
            propertyName: fileType

    FileCommon:
      description: Metadata common to all files.
      type: object
      properties:
        id:
          description: Unique id of resource
          type: string
        fileType:
          type: string
          enum: [summary, weather]
        filepath:
          description: Filepath in storage to file contents
          type: string
        selfUri:
          description: URI for this resource
          type: string
          format: uri
        contentUri:
          description: URI of weather file content for downloading.
          type: string
          format: uri
      required:
        - id
        - fileType
        - filepath
        - selfUri
        - contentUri

    WxFile:
      description: Metadata specific to a weather file.
      type: object
      properties:
        creationDate:
          description: Weather file creation date
          type: string
          format: date-time
        dataSource:
          description: Source of data.
          type: string
        designDataType:
          description: |
            Type of summary (?) of weather data in this file:
            - `TMY`: Typical meteorological year
          type: string
          enum: ["TMY", "XMY", "TSY", "AMY", "design day"]  # To be extended.
        scenario:
          description: |
            RCP (represenatative concentration pathway) or SSP (shared 
			socioeconomic pathway) in model(s) used to generate this file.
          type: string
          enum: ["RCP 2.6", "RCP 4.5", "RCP 8.5", "SSP1-2.6", "SSP2-4.5", "SSP5-8.5"]
        timePeriod:
          $ref: '#/components/schemas/TimePeriod'
        ensembleStatistic:
          description: |
            Statistic over ensemble used to generate this data.
          type: string
          enum: ["average", "median", "10th percentile", "90th percentile"]
        variables:
          description: Variables (e.g., temperature) in this file.
          type: string
          enum:
            - T
            - all thermodynamic
            - all
        anomaly:
          description: Type of anomaly.
          type: string
          enum:
            - daily
            - seasonal
            - annual
        smoothing:
          description: Smoothing applied to variable anomaly.
          # TODO: Consider whether this would be better represented as
          #  a nullable integer value
          type: string
          enum:
            - none
            - 1
            - 5
            - 11
            - 21
      required:  # All
        - creationDate
        - dataSource
        - designDataType
        - scenario
        - timePeriod
        - ensembleStatistic
        - variables
        - anomaly
        - smoothing

    SummaryFile:
      description: Metadata specific to a summary file
      type: object
      properties: {}

    TimePeriod:
      description: Metadata describing a file's (climatological) time period
      type: object
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
